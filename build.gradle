/*
 *  /***************************************************************************
 *  Copyright (c) 2017, EPAM SYSTEMS INC
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *     http://www.apache.org/licenses/LICENSE-2.0
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 *  ***************************************************************************
 */

plugins {
    id 'jacoco'
    id 'maven'
    id 'signing'
    id 'io.codearte.nexus-staging' version '0.21.2'
}

allprojects {
    group group
    version version

    apply plugin: 'groovy'
    apply plugin: 'java'
    repositories {
        mavenLocal()
        mavenCentral()

        flatDir {
            dirs 'lib'
        }

        maven {
            url 'https://maven.jahia.org/maven2'
        }

        maven {
            url 'https://artifacts.elastic.co/maven'
        }

        maven {
            url "https://m2proxy.atlassian.com/repository/public"
        }

        maven {
            url 'https://maven.atlassian.com/content/repositories/atlassian-public'
        }

        maven {
            url "https://oss.sonatype.org/content/groups/staging"
        }
    }
}

sourceCompatibility = JavaVersion.VERSION_1_8
targetCompatibility = JavaVersion.VERSION_1_8
archivesBaseName = rootProject.name

repositories {
    mavenLocal()
    mavenCentral()
    maven {
        url "https://oss.sonatype.org/content/groups/public"
    }
}

uploadArchives {
    repositories {
        mavenDeployer {
            beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }

            repository(url: "https://oss.sonatype.org/service/local/staging/deploy/maven2/") {
                authentication(userName: nexusUsername, password: nexusPassword)
            }

            snapshotRepository(url: "https://oss.sonatype.org/content/repositories/snapshots/") {
                authentication(userName: nexusUsername, password: nexusPassword)
            }

            pom.project {
                packaging 'jar'
                name rootProject.name
                description 'Groovy ManiPulator'
                url 'https://github.com/epam/GMP'

                scm {
                    url 'https://github.com/epam/GMP'
                    connection 'scm:https://github.com/epam/GMP.git'
                    developerConnection 'scm:https://github.com/epam/GMP.git'
                }

                licenses {
                    license {
                        name 'The Apache License, Version 2.0'
                        url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                    }
                }

                developers {
                    developer {
                        id 'asamuta'
                        name 'Andrei Samuta'
                        email 'a.samuta@gmail.com'
                    }
                }
            }
        }
    }
}

nexusStaging {
    packageGroup = "com.epam.dep"
}

dependencies {
    compile project(':common')
    compile "org.codehaus.groovy:groovy:$groovyVersion"
    compile "org.springframework:spring-context-support:$springVersion"
    compile "org.springframework:spring-aspects:${springVersion}"
    compile "org.slf4j:slf4j-api:${slf4jVersion}"
    compile "commons-cli:commons-cli:$commonsCliVersion"
    compile "com.google.guava:guava:$guavaVersion"
    compile "org.yaml:snakeyaml:$snakeyamlVersion"
    compile "org.apache.logging.log4j:log4j-slf4j-impl:$slftolog4jVersion"
    compile "org.apache.logging.log4j:log4j-api:$log4j2Version"
//TEST
    testCompile group: 'junit', name: 'junit', version: junitVersion
    testCompile "org.springframework:spring-test:${springVersion}"

}

task copyConfig(type: Copy) {
    into "$buildDir/install"
    from "src/main/resources/gmp.properties"
}

task copyBinary(type: Copy) {
    into "$buildDir/install"
    from "$buildDir/libs"
}

task copyDepandancies(type: Copy) {
    into "$buildDir/install/lib"
    from configurations.runtime
}

jar {
    manifest {
        attributes 'Implementation-Title': 'Groovy ManiPulator',
                'Implementation-Version': version,
                'Implementation-Vendor': 'EPAM SYSTEMS INC',
                'Main-Class': 'com.epam.gmp.ChainExecutor',
                'Class-Path': configurations.compile.collect { 'lib/' + it.getName() }.join(' ')
    }
}

task javadocJar(type: Jar) {
    classifier = 'javadoc'
    from javadoc
}

task sourcesJar(type: Jar) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

artifacts {
    archives javadocJar, sourcesJar
}

if (project.hasProperty('signing.keyId')) {
    signing {
        sign configurations.archives
    }
}

test {
    testLogging {
        showStandardStreams = true
    }
    finalizedBy jacocoTestReport
}

jacocoTestReport {
    reports {
        xml.enabled true
        csv.enabled false
    }
}